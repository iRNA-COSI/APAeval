# Configuration file for snakemake pipeline

# Reference PAS file: must have the same format as PolyASite bed
# see https://polyasite.unibas.ch/atlas

# reference PAS filename (format: `.bed` or `.bed.gz`)
ref_PAS_file: "../../tests/test_data/atlas.clusters.2.0.GRCm38.96.wchr.bed.gz"
atlas_version: "m38"


# For development purposes, you can freely choose out_dir.
# Note that final outputs need to be copied to a global APAeval output directory in the form of "PATH/TO/s3-BUCKET/PARAMCODE/METHOD/"
out_dir: "results"
challenge_code : "AA" # find at https://github.com/iRNA-COSI/APAeval/blob/main/summary_workflows/challenge_codes.md
method: "PAQR" # same as the name of the directory
outcode: "02" # for TPM quantification challenge
rel_use_outcode: "04" # for per-PAS fractional relative quantification challenge

##################################
# Create Tandem poly(A)-sites
##################################
# Import https://github.com/zavolanlab/tandem-pas as module;
# config keys have to match those in the published pipeline!
tpas:
  # directory that contains the scripts
  scriptsdir: workflow/scripts_tpas

  # genome annotation (format: `.gtf` or `.gtf.gz`)
  gtf: "../../tests/test_data/gencode_2genes_Chr_prefix.vM18.annotation.gtf"

  # Caculate TPAS for stranded or unstranded data, or both?
  # specify as list of strings (e.g. ["unstranded", "stranded"])
  # Note that you have to set the parameter "PAQ_coverage_unstranded" below accordingly
  strandedness: ["stranded"]

  # minimum support that a site in the atlas needs to be considered
  # This is bed column 5 of the atlas
  # (version 1.0: number of supporting protocols, version 2.0: tpm)
  min_support: 0

  # filtering fields in the annotation file, adjust according to the gtf file used
  # ensembl: transcript_biotype, gencode: transcript_type
  biotype_key: transcript_type
  # If not filtering, comment the key 'biotype_values', else an error is raised
  # biotype_values:
  #   - lncRNA
  #   - protein_coding

  # number of nucleotides by which each terminal exon is extended at the 3' end
  three_prime_offset: 100

  # locusExtension: up/down extension of transcript locus to catch reads that start/end beyond transcript boundaries
  locus_extension: 100

  # region downstream of terminal exon 3' ends that should not overlap with any
  # other annotated feature
  downstream_extend: 200

  ############################################
  # Mock params needed for DAG, don't change
  polyasites: ""
  atlas_version: ""
  # out- and logdir are set in Snakefile to be subdirectories of the result directory specified at param `out_dir`
  outdir: ""
  logdir: ""




##################################
# PAQR
##################################
# Import https://github.com/zavolanlab/PAQR2 as module,
# config keys have to match those in the published pipeline!
paqr:
  # path to the directory with all the scripts for this pipeline
  # (relative to the 'execution' directory)
  PAQ_scripts_dir: "workflow/scripts_paqr"

  # path to tab separated file containing samples info
  # NOTE: alignment files (bam) and their repective indices (bam.bai) must be located in the same directory!
  PAQ_samples_table: "config/samples.tsv"

  # number of nucleotides for which the coverage profile is extended
  # and obtained downstream of each annotated exon end
  PAQ_coverage_downstream_extension: "200"

  # minimum distance between the exon start and the most proximal poly(A) site
  # (for exons with distances below the cutoff the upstream extension
  # of the coverage is calculated)
  PAQ_min_distance_start_to_proximal: "250"

  # IMPORTANT:
  # denote if the BAM files come from unstranded sequencing
  # By default paired-end sequencing with read1 - reverse orientation,
  # read2 - forward orientation is assumed.
  # Single-stranded data with the reads in sense direction are processed properly too
  # PAQR does not support single-end data in reverse orientation.
  PAQ_coverage_unstranded: "no"

  # expected RNA-Seq read length
  PAQ_read_length: "100"

  # minimum length of the region that needs to be available
  # to calculate a mean coverage and the mean squared error
  PAQ_min_length_mean_coverage: "100"

  # minimum mean coverage required for an exon to be considered in the analysis
  PAQ_min_mean_exon_coverage: "5"

  # length of the region downstream of the exon,
  # necessary to search for zero coverage downstream of the distal site
  PAQ_distal_downstream_extension: "200"

  # maximum percentage of the coverage at the exon start
  # which is allowed for the mean coverage in the downstream region
  # of a valid distal site
  PAQ_max_mean_coverage: "10"

  # distance until which poly(A) clusters are merged
  PAQ_cluster_distance: "200"

  # upstream extension added to the poly(A) cluster's end
  # during the check for global break points
  PAQ_upstream_cluster_extension: "200"

  # upper limit on the ratio of coverage mean squared error values
  # after and before including a new break point
  PAQ_coverage_mse_ratio_limit: "0.5"

  ############################################
  # Mock params needed for DAG, don't change
  PAQ_tandem_pas: ""
  # out- and logdir are set in Snakefile to be subdirectories of the result directory specified at param `out_dir`
  PAQ_outdir: ""
  PAQ_logdir: ""
