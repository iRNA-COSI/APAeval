
# ------------------------------------------------------------------------------
# Packages, Libraries and Sources

import pandas as pd
import os


# ------------------------------------------------------------------------------
# Config/Metadata

# Read in config file
# configfile: "config/config.Roar.yaml"

# Convert config to dataframe
samples = pd.read_csv(os.path.abspath(config["samples"]),sep=",")


#-------------------------------------------------------------------------------
# Parameters, filenames & sample data

# Parameters
THREADS = config["threads"]
SCRIPTS = config["scripts"]
OUTDIR = config["out_dir"]


# Final Target Rule ------------------------------------------------------------
localrules: finish


rule finish:
    """Rule that specifies the final output.
    """
    input:
        os.path.join(OUTDIR,
                     "_".join([config["paramcode"],
                               config["participant"],
                               config["differential_outcode"]]
                              ) + ".tsv")


#-------------------------------------------------------------------------------

rule generate_roar_gtf:
    '''
    Generate 'single APA' type Roar annotations (i.e. single prox site per gene)
    '''
    input:
        gtf = config["reference_gtf"],
        polya = config["polya_sites"]

    output:
        os.path.join(OUTDIR, "roar_annotations.gtf")

    params:
        script = os.path.join(SCRIPTS, "make_roar_annotations.py")

    log:
        os.path.join(OUTDIR, config["local_log"], "generate_roar_gtf.log")

    container:
        "docker://quay.io/biocontainers/pyranges:0.0.115--pyh5e36f6f_0"

    shell:
        """
        (python {params.script} \
        --gtf {input.gtf} \
        --polya {input.polya} \
        -o {output}) &> {log}
        """


rule run_roar:
    input:
        gtf = os.path.join(OUTDIR, "roar_annotations.gtf"),
        sample_tbl = config["samples"]

    output:
        os.path.join(OUTDIR, "roar_results.tsv")

    params:
        script = os.path.join(SCRIPTS, "Roar.R"),
        base_condition = config["control_condition_key"],
        stranded = "--stranded" if config["is_stranded"] else ""

    threads: THREADS

    container:
        "docker://quay.io/biocontainers/bioconductor-roar:1.28.0--r41hdfd78af_0"

    log:
        os.path.join(OUTDIR, config["local_log"], "run_roar.log")

    shell:
        """
        (Rscript {params.script} \
        {input.gtf} \
        {input.sample_tbl} \
        {params.base_condition} \
        {output} \
        {params.stranded}) &> {log}
        """


rule get_differential_tsv:
    input:
        os.path.join(OUTDIR, "roar_results.tsv")

    output:
        os.path.join(OUTDIR,
                     "_".join([config["paramcode"],
                               config["participant"],
                               config["differential_outcode"]]
                              ) + ".tsv")

    params:
        script = os.path.join(config["scripts"],
                              "make_differential_tsv.py")

    # PyRanges is built on top of pandas - re-using image to avoid extra images
    container:
        "docker://quay.io/biocontainers/pyranges:0.0.115--pyh5e36f6f_0"

    log:
        os.path.join(OUTDIR, config["local_log"], "get_differential_tsv.log")

    shell:
        """
        (python {params.script} \
        -i {input} \
        -o {output}) &> {log}
        """

#-------------------------------------------------------------------------------
# How did it go?
#-------------------------------------------------------------------------------
onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred, check log at %s." % {log})
