"""Snakemake pipeline for APAlyzer.
For help see: https://snakemake.readthedocs.io/en/stable/index.html.
"""

import pandas as pd
import os

configfile: "config/config.APAlyzer.yaml"

samples = pd.read_csv(os.path.abspath(
    config["samples"]), sep=',', header=0).set_index("sample", drop=True)

#-------------------------------------------------------------------------------
localrules: finish
print(list(set(samples.bam.values)))
rule finish:
    """Rule that specifies the final output."""
    input:
        final = expand(
            os.path.join(
                config["out_dir"],
                "{sample}_{experiment}_quant_APAlyzer.csv"),
            sample=samples.index.values,
            experiment=list(set(samples.experiment.values)))


# diff_usage = expand(
#             os.path.join(
#                 config["out_dir"],
#                 "{experiment}_differential_usage_APAlyzer.csv"),
#             experiment=list(set(samples.experiment.values))
#-------------------------------------------------------------------------------
# Preprocessing: obtain suitable input formats
rule gff_to_gtf:
    """A rule that creates the APA sites from a gtf file.
    """
    input:
        gff = config['gff']
    output:
        gtf = os.path.join(config["out_dir"], f'{config["genome_name"]}.gtf.gz')
    params:
        gtf = os.path.join(config["out_dir"], f'{config["genome_name"]}.gtf')
    log:
        os.path.join(config["local_log"], "gff_to_gtf.log")
    conda: 
        os.path.join(config["envs"], "APAlyzer.yaml")
    shell:
        """(gffread {input.gff} -T -o {params.gtf}; \
        gzip {params.gtf}; ) &> {log}"""


# Preprocessing: obtain suitable input formats
rule genome_preprocessing:
    """A rule that creates the APA sites from a gtf file.
    """
    input:
        gtf = os.path.join(config["out_dir"], f'{config["genome_name"]}.gtf.gz')
    output:
        out_genome = os.path.join(config["out_dir"], 'reference_genome.RData')
    params:
        outdir = config["out_dir"]
    log:
        os.path.join(config["local_log"], "genome_preprocessing.log")
    conda: 
        os.path.join(config["envs"], "APAlyzer.yaml")

    shell:
        """(Rscript  workflow/scripts/APAlyzer_build_reference_genome.R \
            --dir_path {params.outdir} \
            --input_gtf {input.gtf} \
            --out_reference {output.out_genome};) &> {log}"""

    

#-------------------------------------------------------------------------------
# Quantification
rule quantification:
    """A rule that does the 3' UTR quantification.
    """
    input:
        bam = lambda wildcards: os.path.join(samples.loc[wildcards.sample, "bam"]),
        genome = os.path.join(config["out_dir"], "reference_genome.RData")
    output:
        out_quantification = os.path.join(config["out_dir"], "{sample}_{experiment}_quant_APAlyzer.csv")
    params:
        sample_name = "{sample}",
        read_orientation = lambda wildcards: samples.loc[wildcards.sample, "orientation"]
    log:
        os.path.join(config["local_log"], "{sample}_{experiment}_quantification.log")
    conda: 
        os.path.join(config["envs"], "APAlyzer.yaml")
    
    shell:
       """(Rscript  workflow/scripts/APAlyzer_quantification.R \
            --sample_name {params.sample_name} \
            --sample_path {input.bam} \
            --reference_genome {input.genome} \
            --read_orientation {params.read_orientation} \
            --out_quantification {output.out_quantification}) &> {log}"""




#  
# #-------------------------------------------------------------------------------
# # Differential APA usage
# rule differential_usage:
#     """A rule that does the differential usage estimate of the 3' UTRs.
#     """
#     input:
#         quants = lambda wildcards: expand(
#             os.path.join(
#                 config["out_dir"],
#                 "{sample}_{experiment}_quant_APAlyzer.csv"),
#             sample=samples.index.values,
#             experiment=wildcards.experiment)
#     output:
#         diff_usage = os.path.join(
#             config["out_dir"],
#             "{experiment}_differential_usage_APAlyzer.csv")
#     params:
#         sample_name = "{sample}"
#     log:
#         os.path.join(config["local_log"], "{experiment}_differential_usage_APAlyzer.log")
#     conda:
#         os.path.join(config["envs"], "APAlyzer.yaml")
#     shell:
#        """(Rscript  APAlyzer_differential_usage.R \
#             --sample_name {params.sample_name} \
#             --sample_path {input.bam} \
#             --reference_genome {input.genome} \
#             --out_quantification {output.out_quantification}) &> {log}"""


# #-------------------------------------------------------------------------------
# # How did it go?
# #-------------------------------------------------------------------------------
# onsuccess:
#     print("Workflow finished, no error")

# onerror:
#     print("An error occurred, check log at %s." % {log})