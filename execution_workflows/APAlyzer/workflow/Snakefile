"""
Snakemake pipeline for APAlyzer.
For help see: https://snakemake.readthedocs.io/en/stable/index.html.
"""

import os
import sys


LOG_DIR = os.path.join(config["out_dir"], config["logs_subdir"],"")

include: "rules/preprocessing.smk"
include: "rules/main.smk"
include: "rules/postprocessing.smk"

#-------------------------------------------------------------------------------
# Check run mode params
#-------------------------------------------------------------------------------
assert isinstance(config["run_identification"], bool), f"'run_identification' must be True/False boolean, {config['run_identification']} (type {type(config['run_identification'])}) was provided"
assert isinstance(config["run_quantification"], bool), f"'run_quantification' must be True/False boolean, {config['run_quantification']} (type {type(config['run_quantification'])}) was provided"
assert isinstance(config["run_differential"], bool), f"'run_differential' must be True/False boolean, {config['run_differential']} (type {type(config['run_differential'])}) was provided"

def flag_info_message(flag_name, challenge_name):

    if config[flag_name]:
        sys.stderr.write(f"config['{flag_name}'] set to True - {challenge_name} challenge output to be generated\n")

    elif not config[flag_name]:
        sys.stderr.write(f"config['{flag_name}'] set to False - {challenge_name} challenge output will not be generated. Is this desired run mode?\n")


# Info messages
flag_info_message("run_identification", "identification")
flag_info_message("run_quantification", "quantification")
flag_info_message("run_differential", "differential")

if config["run_identification"] is not False:
    raise ValueError("'run_identification' must be set to False as tool is incompatible with the identification challenge/does not perform this task (see README for details).")

if config["run_quantification"] is not False:
    raise ValueError("'run_quantification' must be set to False as tool is incompatible with the quantification challenge/does not perform this task (see README for details).")

if config["run_differential"] is not True:
    raise ValueError("'run_differential' must be set to True as tool is only compatible with the differential challenge.")


#-------------------------------------------------------------------------------
localrules: finish


rule finish:
    """
    Rule that specifies the final output.
    """
    input:
        final = rules.postprocessing.output.out_postprocessing

#-------------------------------------------------------------------------------
# How did it go?
#-------------------------------------------------------------------------------
onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred, check log at %s." % {log})
